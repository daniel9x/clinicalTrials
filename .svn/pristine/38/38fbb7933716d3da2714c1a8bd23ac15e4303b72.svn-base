package edu.emory.clinical.trials.webapp.server;

import java.io.IOException;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.Unmarshaller;

import org.apache.log4j.Logger;
import org.quartz.Job;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;

import edu.emory.clinical.trials.webapp.server.entity.ClinicalTrial;
import edu.emory.clinical.trials.webapp.server.entity.ClinicalTrialInterventionStaging;
import edu.emory.clinical.trials.webapp.server.entity.ClinicalTrialKeywordStaging;
import edu.emory.clinical.trials.webapp.server.entity.ClinicalTrialKeywordStagingPrimaryKey;
import edu.emory.clinical.trials.webapp.server.entity.ClinicalTrialLocationStaging;
import edu.emory.clinical.trials.webapp.server.entity.ClinicalTrialMeshTermStaging;
import edu.emory.clinical.trials.webapp.server.entity.ClinicalTrialMeshTermStagingPrimaryKey;
import edu.emory.clinical.trials.webapp.server.entity.ClinicalTrialStaging;
import edu.emory.clinical.trials.webapp.server.rest.RestServerConfigurator;
import edu.emory.clinical.trials.webapp.server.xmlobject.ClinicalTrialXml;
import edu.emory.clinical.trials.webapp.server.xmlobject.Intervention;
import edu.emory.clinical.trials.webapp.server.xmlobject.Location;

public class ClinicalTrialsDataExtractor implements Job {

	static int locationPrimaryKey = 1;

	static int interventionPrimaryKey;
	
	private EmailManager emailManager;

	private Logger logger = Logger.getLogger(ClinicalTrialsDataExtractor.class.getName());

	@PersistenceContext(unitName="clinicalTrialsEntityManager")
	private EntityManager em;

	public void execute(JobExecutionContext context) throws JobExecutionException {
		try {
			ClinicalTrialsDataExtractor ctExtract = new ClinicalTrialsDataExtractor();
			ctExtract.extract();	
		}
		catch (Exception e) {
			logger.error("ERROR:", e);
		}

	}

	public void extract() throws Exception {
		
		emailManager = new EmailManager();

		List<String> nctIds = getNctIds();

		List<String> failedNctIds = new ArrayList<String>();

		JAXBContext context = JAXBContext.newInstance(ClinicalTrialXml.class);

		Unmarshaller unmarshaller = context.createUnmarshaller();

		Collections.sort(nctIds);

//		nctIds.clear();
//		nctIds.add("NCT01567462");

		// Iterate through compiled list of NCTIDs and harvest/persist
		for (String nctId : nctIds) {
			logger.debug(nctId);
			String urlString = "https://clinicaltrials.gov/show/" + nctId + "?displayxml=true";

			URL url = new URL(urlString);
			URLConnection connection = url.openConnection();

			try {
				ClinicalTrialXml clinicalTrialXml = (ClinicalTrialXml) unmarshaller.unmarshal(connection.getInputStream());

				// Get Data from XML and convert it to (Persistable) Java Object
				ClinicalTrialStaging trial = convertXmlToStudyObject(clinicalTrialXml);
				trial.setNctId(nctId);
				
				em = RestServerConfigurator.getInstance().getEmf().createEntityManager();

				// Get Keywords
				List<ClinicalTrialKeywordStaging> keywords = fetchKeywords(nctId, clinicalTrialXml);

				// Get Mesh Terms
				List<ClinicalTrialMeshTermStaging> meshTerms = fetchMeshTerms(nctId, clinicalTrialXml);

				// Get Interventions
				List<ClinicalTrialInterventionStaging> interventions = fetchInterventions(nctId,clinicalTrialXml);

				/* Get Location Data -- Currently deprecating / removing this data pull as
				 * the location data volume is extremely large and there isn't much value in
				 * caputuring it at this time.
				 */

				// List<ClinicalTrialLocation> locations = fetchLocations(nctId, clinicalTrialXml);
				List<ClinicalTrialLocationStaging> locations = new ArrayList<ClinicalTrialLocationStaging>();

				persistObjectsToDB(trial, keywords, meshTerms, locations, interventions, em);

			} catch (IOException e) {
				logger.error(nctId + " does not exist on ClinicalTrials.gov");
				ClinicalTrial trial = new ClinicalTrial();
				trial.setNctId(nctId);
				trial.setBriefTitle("DOES NOT EXIST IN CLINICALTRIALS.GOV");
				persistObject(trial, em);

			} catch (Exception e) { 
				failedNctIds.add(nctId);
				logger.error("ERROR:", e);
			}
		}

		logger.debug("# of Failed NCTIDs: " + failedNctIds.size());

		for (String nctId : failedNctIds) {
			logger.error(nctId + " -- failed to extract; Exception was thrown.");
		}

		if (failedNctIds.size() <= 0) {
			logger.debug("Extraction completed without errors.");
			emailManager.sendExtractSuccessEmail(nctIds.size());
		}
		else {
			emailManager.sendExtractFailureEmail(failedNctIds);
		}

	}

	private void persistObjectsToDB(ClinicalTrialStaging trial, List<ClinicalTrialKeywordStaging> keywords, List<ClinicalTrialMeshTermStaging> meshTerms, List<ClinicalTrialLocationStaging> locations, List<ClinicalTrialInterventionStaging> interventions, EntityManager em) throws Exception {

		persistObject(trial, em);
		
		try {

		for (ClinicalTrialKeywordStaging keyword : keywords) {
			persistObject(keyword, em);
		}

		for (ClinicalTrialMeshTermStaging meshTerm : meshTerms) {
			persistObject(meshTerm, em);
		}

		for (ClinicalTrialLocationStaging location : locations) {
			persistObject(location, em);
		}

		for (ClinicalTrialInterventionStaging intervention : interventions) {
			persistObject(intervention, em);
		}
		
		}
		
		catch (Exception e) {
			logger.error("ERROR:", e);
			throw new Exception(e);
		}
		 
		em.close();

	}

	@SuppressWarnings("unchecked")
	private List<String> getNctIds() {
		
		em = RestServerConfigurator.getInstance().getEmf().createEntityManager();

		Query query = em.createQuery("select distinct trim(e.primaryKey.nctId) from ErmsStudy e");

		List<String> nctIds = query.getResultList();
		
		em.close();

		return nctIds;
	}

	private void persistObject(Object object, EntityManager em) throws Exception {
		try {
			if(!em.getTransaction().isActive()) {
				em.getTransaction().begin();
				em.persist(object);
				em.getTransaction().commit();
			}
		}
		catch (Exception e) {
			logger.error("ERROR:", e);
			if (em.getTransaction().isActive()) {
				em.getTransaction().rollback();
			}
			throw new Exception(e);
		}
	}

	private List<ClinicalTrialKeywordStaging> fetchKeywords(String nctId, ClinicalTrialXml clinicalTrialXml) {
		List<String> keywords = clinicalTrialXml.getKeywords();
		List<ClinicalTrialKeywordStaging> ctKeywords = new ArrayList<ClinicalTrialKeywordStaging>();

		for (String keyword : keywords) {
			ClinicalTrialKeywordStaging ctKeyword = new ClinicalTrialKeywordStaging();
			ClinicalTrialKeywordStagingPrimaryKey kPk = new ClinicalTrialKeywordStagingPrimaryKey();
			kPk.setKeyword(keyword);
			kPk.setNctId(nctId);
			ctKeyword.setPrimaryKey(kPk);
			ctKeyword.setTransferDate(new Date());
			ctKeywords.add(ctKeyword);
		}

		return ctKeywords;
	}

	private List<ClinicalTrialMeshTermStaging> fetchMeshTerms(String nctId, ClinicalTrialXml clinicalTrialXml) {
		List<String> conditionMeshTerms = clinicalTrialXml.getConditionBrowse().getMeshTerms();
		List<String> interventionMeshTerms = clinicalTrialXml.getInterventionBrowse().getMeshTerms();

		List<ClinicalTrialMeshTermStaging> meshTerms = new ArrayList<ClinicalTrialMeshTermStaging>();

		for (String conditionMeshTerm : conditionMeshTerms) {
			ClinicalTrialMeshTermStaging ctMeshTerm = processMeshTerm(conditionMeshTerm, nctId);
			ctMeshTerm.setMeshTermType("C");
			ctMeshTerm.setTransferDate(new Date());
			meshTerms.add(ctMeshTerm);
		}

		for (String interventionMeshTerm : interventionMeshTerms) {
			ClinicalTrialMeshTermStaging ctMeshTerm = processMeshTerm(interventionMeshTerm, nctId);
			ctMeshTerm.setMeshTermType("I");
			ctMeshTerm.setTransferDate(new Date());
			meshTerms.add(ctMeshTerm);
		}

		return meshTerms;
	}

	private List<ClinicalTrialInterventionStaging> fetchInterventions(String nctId, ClinicalTrialXml clinicalTrialXml) {
		List<Intervention> interventions = clinicalTrialXml.getInterventions();
		List<ClinicalTrialInterventionStaging> ctInterventions = new ArrayList<ClinicalTrialInterventionStaging>();

		for (Intervention intervention : interventions) {
			ClinicalTrialInterventionStaging ctIntervention = new ClinicalTrialInterventionStaging();
			ctIntervention.setInterventionId(interventionPrimaryKey++);
			ctIntervention.setInterventionName(intervention.getInterventionName());
			ctIntervention.setNctId(nctId);
			ctIntervention.setInterventionType(intervention.getInterventionType());
			ctIntervention.setOtherName(intervention.getOtherName());
			ctIntervention.setDescription(intervention.getDescription());
			ctIntervention.setTransferDate(new Date());
			ctInterventions.add(ctIntervention);
		}

		return ctInterventions;
	}

	//	private List<ClinicalTrialLocation> fetchLocations(String nctId, ClinicalTrialXml clinicalTrialXml) {
	//		List<Location> locations = clinicalTrialXml.getLocations();
	//		
	//		List<ClinicalTrialLocation> ctLocations = new ArrayList<ClinicalTrialLocation>();
	//		
	//		for (Location location : locations) {
	//			ClinicalTrialLocation ctLocation = new ClinicalTrialLocation();
	//			ctLocation.setId(locationPrimaryKey++);
	//			ctLocation.setNctId(nctId);
	//			ctLocation.setCity(location.getFacility().getAddress().getCity());
	//			ctLocation.setCountry(location.getFacility().getAddress().getCountry());
	//			ctLocation.setState(location.getFacility().getAddress().getState());
	//			ctLocation.setStatus(location.getStatus());
	//			ctLocations.add(ctLocation);
	//		}
	//		
	//		return ctLocations;
	//	}

	private ClinicalTrialMeshTermStaging processMeshTerm(String meshTerm, String nctId) {
		ClinicalTrialMeshTermStaging ctMeshTerm = new ClinicalTrialMeshTermStaging();
		ClinicalTrialMeshTermStagingPrimaryKey mtPk = new ClinicalTrialMeshTermStagingPrimaryKey();
		mtPk.setMeshTerm(meshTerm);
		mtPk.setNctId(nctId);
		ctMeshTerm.setPrimaryKey(mtPk);
		return ctMeshTerm;
	}

	public ClinicalTrialStaging convertXmlToStudyObject(ClinicalTrialXml clinicalTrialXml) {

		ClinicalTrialStaging trial = new ClinicalTrialStaging();
		trial.setOrgStudyId(clinicalTrialXml.getIdInfo().getOrgStudyId());
		trial.setSecondaryId(clinicalTrialXml.getIdInfo().getSecondaryId());
		trial.setNctAlias(clinicalTrialXml.getIdInfo().getNctAlias());
		trial.setBriefTitle(clinicalTrialXml.getBriefTitle());
		trial.setOfficialTitle(clinicalTrialXml.getOfficialTitle());
		trial.setLeadSponsor(clinicalTrialXml.getSponsors().getLeadSponsor().getAgency());
		trial.setCollaborator(clinicalTrialXml.getSponsors().getCollaborator().getAgency());
		trial.setSource(clinicalTrialXml.getSource());
		trial.setAuthority(clinicalTrialXml.getOversightInfo().getAuthority());
		trial.setHasDmc(clinicalTrialXml.getOversightInfo().getHasDmc());
		if (clinicalTrialXml.getBriefSummary().getTextBlock().length() > 3000) {
			trial.setBriefSummary(clinicalTrialXml.getBriefSummary().getTextBlock().substring(0, 3000) + "...");
		}
		else {
			trial.setBriefSummary(clinicalTrialXml.getBriefSummary().getTextBlock());
		}
		trial.setOverallStatus(clinicalTrialXml.getOverallStatus());
		trial.setStartDate(clinicalTrialXml.getStartDate());
		trial.setEndDate(clinicalTrialXml.getEndDate());
		trial.setWhyStopped(clinicalTrialXml.getWhyStopped());
		trial.setPrimaryCompletionDate(clinicalTrialXml.getPrimaryCompletionDate());
		trial.setPhase(clinicalTrialXml.getPhase());
		trial.setStudyType(clinicalTrialXml.getStudyType());
		trial.setStudyDesign(clinicalTrialXml.getStudyDesign());
		trial.setPrimaryOutcomeMeasure(clinicalTrialXml.getPrimaryOutcome().getMeasure());
		trial.setPrimaryOutcomeTimeFrame(clinicalTrialXml.getPrimaryOutcome().getTimeFrame());
		trial.setPrimaryOutcomeSafetyIssue(clinicalTrialXml.getPrimaryOutcome().getSafetyIssue());
		trial.setPrimaryOutcomeDescription(clinicalTrialXml.getPrimaryOutcome().getDescription());
		trial.setSecondaryOutcomeMeasure(clinicalTrialXml.getSecondaryOutcome().getMeasure());
		trial.setSecondaryOutcomeTimeFrame(clinicalTrialXml.getSecondaryOutcome().getTimeFrame());
		trial.setSecondaryOutcomeSafetyIssue(clinicalTrialXml.getSecondaryOutcome().getSafetyIssue());
		trial.setSecondaryOutcomeDescription(clinicalTrialXml.getSecondaryOutcome().getDescription());
		trial.setNumberOfArms(clinicalTrialXml.getNumberOfArms());
		trial.setEnrollmentType(clinicalTrialXml.getEnrollmentType());
		trial.setCondition(clinicalTrialXml.getCondition());
		trial.setArmGroupLabel(clinicalTrialXml.getArmGroup().getArmGroupLabel());
		trial.setArmGroupType(clinicalTrialXml.getArmGroup().getArmGroupType());
		trial.setArmGroupDescription(clinicalTrialXml.getArmGroup().getDescription());
		if (clinicalTrialXml.getEligibility().getCriteria().getTextBlock().length() > 3000){
			trial.setEligibilityCriteria(clinicalTrialXml.getEligibility().getCriteria().getTextBlock().substring(0, 3000) + "...");
		}
		else {
			trial.setEligibilityCriteria(clinicalTrialXml.getEligibility().getCriteria().getTextBlock());
		}
		trial.setGender(clinicalTrialXml.getEligibility().getGender());
		trial.setMinimumAge(clinicalTrialXml.getEligibility().getMinimumAge());
		trial.setMaximumAge(clinicalTrialXml.getEligibility().getMaximumAge());
		trial.setHealthyVolunteers(clinicalTrialXml.getEligibility().getHealthyVolunteers());
		trial.setVerificationDate(clinicalTrialXml.getVerificationDate());
		trial.setLastChangedDate(clinicalTrialXml.getLastChangedDate());
		trial.setFirstReceivedDate(clinicalTrialXml.getFirstReceivedDate());
		trial.setResponsiblePartyType(clinicalTrialXml.getResponsibleParty().getResponsiblePartyType());
		// If the Responsible Party is a PI and is affiliated with Emory, we will persist the information.
		if (trial.getResponsiblePartyType().equals("Principal Investigator") && clinicalTrialXml.getResponsibleParty().getInvestigatorAffiliation().contains("Emory")) {
			trial.setInvestigatorAffiliation(clinicalTrialXml.getResponsibleParty().getInvestigatorAffiliation());
			trial.setInvestigatorFullName(clinicalTrialXml.getResponsibleParty().getInvestigatorFullName());
			trial.setInvestigatorTitle(clinicalTrialXml.getResponsibleParty().getInvestigatorTitle());
		}
		// Use "Overall Official" (Investigator) fields if the Responsible Party information isn't there.
		else if (clinicalTrialXml.getOverallOfficial().getRole().equals("Principal Investigator") && clinicalTrialXml.getOverallOfficial().getAffiliation().contains("Emory")) {
			trial.setInvestigatorAffiliation(clinicalTrialXml.getOverallOfficial().getAffiliation());
			trial.setInvestigatorFullName(clinicalTrialXml.getOverallOfficial().getFirstName() + " " + clinicalTrialXml.getOverallOfficial().getLastName());
			trial.setInvestigatorTitle(clinicalTrialXml.getOverallOfficial().getRole());
		}
		trial.setIsFdaRegulated(clinicalTrialXml.getIsFdaRegulated());
		trial.setIsSection801(clinicalTrialXml.getIsSection801());
		trial.setHasExpandedAccess(clinicalTrialXml.getHasExpandedAccess());
		trial.setOverallContactName(clinicalTrialXml.getOverallContact().getFullName());
		trial.setOverallContactPhone(clinicalTrialXml.getOverallContact().getPhone());
		trial.setOverallContactEmail(clinicalTrialXml.getOverallContact().getEmail());
		trial.setOverallContactBackupName(clinicalTrialXml.getOverallContactBackup().getFullName());
		trial.setOverallContactBackupPhone(clinicalTrialXml.getOverallContactBackup().getPhone());
		trial.setOverallContactBackupEmail(clinicalTrialXml.getOverallContactBackup().getEmail());
		trial.setTransferDate(new Date());

		for (Location location : clinicalTrialXml.getLocations()) {
			if (location.getFacility().getName().contains("Emory")) {
				trial.setEmorySpecificStatus(location.getStatus());
			}
		}

		return trial;
	}

}
