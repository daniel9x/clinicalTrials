package edu.emory.clinical.trials.webapp.server;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Properties;

import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.Message.RecipientType;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

public class EmailManager {
	
	private String environment;
	
	static SimpleDateFormat dateFormat = new SimpleDateFormat("HH:mm:ss MM/dd/yyyy");

	public void sendExtractSuccessEmail(Integer trialNumber) throws AddressException, MessagingException {
		Session mailSession = Session.getDefaultInstance(new Properties(), null);
		MimeMessage message = new MimeMessage(mailSession);
		message.addFrom(new InternetAddress[] {new InternetAddress("clinicaltrials@emory.edu")});
		message.addRecipient(RecipientType.TO, new InternetAddress("dsgrant@emory.edu"));

		message.setSubject("ClinicalTrials.gov Data Extraction Success.");
		message.setContent("Hello,<br><br>" + "The ClinicalTrials.gov Data Extraction was a success. "
				+ "Number of extracted trials: " + trialNumber + 
				"<br><br>Time Completed: " + dateFormat.format(new Date()) + 
				"<br><br>Environment: " + environment, "text/html");
		Transport.send(message);
	}
	
	public void sendExtractFailureEmail(List<String> nctIds) throws AddressException, MessagingException {
		Session mailSession = Session.getDefaultInstance(new Properties(), null);
		MimeMessage message = new MimeMessage(mailSession);
		message.addFrom(new InternetAddress[] {new InternetAddress("clinicaltrials@emory.edu")});
		message.addRecipient(RecipientType.TO, new InternetAddress("dsgrant@emory.edu"));

		message.setSubject("ClinicalTrials.gov Data Extraction Status - Failure Reported.");
		message.setContent("Hello,<br><br>" + "The ClinicalTrials.gov Data Extraction failed to extract and/or persist the following NCTIDs: " + flattenListToString(nctIds) + "<br><br>Time Captured: " + dateFormat.format(new Date()) + "<br><br>Environment: " + environment, "text/html");
		Transport.send(message);
	}
	
	private String flattenListToString(List<String> stringList) {
		String flattenedList = "";
		for (String item : stringList) {
			flattenedList += item + "<br>";
		}
		return flattenedList;
	}
	
	public void setEnvironment(String environment) {
		this.environment = environment;
	}

}