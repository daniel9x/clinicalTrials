package edu.emory.clinical.trials.webapp.server;

import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.InetAddress;
import java.net.Socket;
import java.net.URL;
import java.net.UnknownHostException;
import java.security.KeyStore;
import java.security.cert.Certificate;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.List;

import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLParameters;
import javax.net.ssl.SSLSocket;
import javax.net.ssl.SSLSocketFactory;
import javax.net.ssl.TrustManagerFactory;

import org.apache.log4j.Logger;

public class SSLExcludeCipherConnectionHelper {
	private Logger logger = Logger.getLogger(SSLExcludeCipherConnectionHelper.class);

	private String[] excludedCipherSuites = {"_DHE_","_DH_"};

	private InputStream trustCert = null;

	private TrustManagerFactory tmf;

	public SSLExcludeCipherConnectionHelper(InputStream trustCert) {
		super();
		this.trustCert = trustCert;
		//Security.addProvider(new BouncyCastleProvider());
		try {
			this.initTrustManager();
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}

	private void initTrustManager() throws Exception {
		CertificateFactory cf = CertificateFactory.getInstance("X.509");
		InputStream caInput = new BufferedInputStream(trustCert);
		Certificate ca = null;
		try {
			ca = cf.generateCertificate(caInput);
			logger.debug("ca=" + ((X509Certificate) ca).getSubjectDN());
		} finally {
			caInput.close();
		}

		// Create a KeyStore containing our trusted CAs
		KeyStore keyStore = KeyStore.getInstance("jks");
		keyStore.load(null, null);
		keyStore.setCertificateEntry("ca", ca);

		// Create a TrustManager that trusts the CAs in our KeyStore
		String tmfAlgorithm = TrustManagerFactory.getDefaultAlgorithm();
		tmf = TrustManagerFactory.getInstance(tmfAlgorithm);
		tmf.init(keyStore);
	}

	public InputStream get(URL url) throws Exception {
		// Create an SSLContext that uses our TrustManager
		SSLContext context = SSLContext.getInstance("TLS");
		context.init(null, tmf.getTrustManagers(), null);
		SSLParameters params = context.getSupportedSSLParameters();
		List<String> enabledCiphers = new ArrayList<String>();
		for (String cipher : params.getCipherSuites()) {
			boolean exclude = false;
			for (int i=0; i<excludedCipherSuites.length && !exclude; i++) {
				exclude = cipher.indexOf(excludedCipherSuites[i]) >= 0;
			}
			if (!exclude) {
				enabledCiphers.add(cipher);
			}
		}
		String[] cArray = new String[enabledCiphers.size()];
		enabledCiphers.toArray(cArray);

		// Tell the URLConnection to use a SocketFactory from our SSLContext
		HttpsURLConnection urlConnection =
				(HttpsURLConnection)url.openConnection();
		SSLSocketFactory sf = context.getSocketFactory();
		sf = new DOSSLSocketFactory(sf, cArray);
		urlConnection.setSSLSocketFactory(sf);
		InputStream is = urlConnection.getInputStream();

		return is;
	}
}
